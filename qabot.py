from ibm_watsonx_ai.foundation_models import ModelInference
from ibm_watsonx_ai.metanames import GenTextParamsMetaNames as GenParams
from ibm_watsonx_ai.metanames import EmbedTextParamsMetaNames
from ibm_watsonx_ai import Credentials
from langchain_ibm import WatsonxLLM, WatsonxEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain_community.document_loaders import PyPDFLoader
from langchain.chains import RetrievalQA

import gradio as gr

# You can use this section to suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings('ignore')

## LLM
def get_llm():
    """
    Initializes and returns a WatsonxLLM instance for text generation.
    Configures the model ID, project ID, and generation parameters.
    """
    model_id = 'mistralai/mixtral-8x7b-instruct-v01'
    # Define generation parameters for the LLM
    parameters = {
        GenParams.MAX_NEW_TOKENS: 250,
        GenParams.MIN_NEW_TOKENS: 50,
        GenParams.TEMPERATURE: 0.7,
        GenParams.REPETITION_PENALTY: 1.2,
    }
    project_id = "skills-network" # Your IBM Cloud project ID

    # Initialize WatsonxLLM with the specified model, URL, project ID, and parameters
    watsonx_llm = WatsonxLLM(
        model_id=model_id,
        url="https://us-south.ml.cloud.ibm.com",
        project_id=project_id,
        params=parameters,
    )
    return watsonx_llm

## Document loader
def document_loader(file):
    """
    Loads a PDF document from the given file path.
    Args:
        file: A file object with a 'name' attribute pointing to the PDF file.
    Returns:
        A list of loaded documents (pages) from the PDF.
    """
    loader = PyPDFLoader(file.name)
    loaded_document = loader.load()
    return loaded_document

## Text splitter
def text_splitter(data):
    """
    Splits the loaded documents into smaller chunks for processing.
    Args:
        data: A list of documents to be split.
    Returns:
        A list of document chunks.
    """
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,  # Increased chunk size for better context
        chunk_overlap=200, # Increased overlap to maintain context
        length_function=len,
    )
    chunks = text_splitter.split_documents(data)
    return chunks

## Embedding model
def watsonx_embedding():
    """
    Initializes and returns a WatsonxEmbeddings instance.
    """
    embed_params = {
        EmbedTextParamsMetaNames.TRUNCATE_INPUT_TOKENS: 3,
        EmbedTextParamsMetaNames.RETURN_OPTIONS: {"input_text": True},
    }

    watsonx_embedding = WatsonxEmbeddings(
        model_id="ibm/slate-125m-english-rtrvr",
        url="https://us-south.ml.cloud.ibm.com",
        project_id="skills-network",
        params=embed_params,
    )
    return watsonx_embedding

## Vector db
def vector_database(chunks):
    """
    Creates a Chroma vector database from document chunks.
    Args:
        chunks: A list of document chunks.
    Returns:
        A Chroma vector database instance.
    """
    embedding_model = watsonx_embedding()
    # Create a Chroma vector database from the chunks and embedding model
    vectordb = Chroma.from_documents(chunks, embedding_model)
    return vectordb

## Retriever
def retriever(file):
    """
    Processes a PDF file to create document chunks and a vector database,
    then returns a retriever object.
    Args:
        file: A file object with a 'name' attribute pointing to the PDF file.
    Returns:
        A retriever instance from the vector database.
    """
    splits = document_loader(file)
    chunks = text_splitter(splits)
    vectordb = vector_database(chunks)
    retriever = vectordb.as_retriever()
    return retriever

## QA Chain
def retriever_qa(file, query):
    """
    Sets up and runs a RetrievalQA chain to answer a query based on the
    content of the uploaded PDF file.
    Args:
        file: A file object with a 'name' attribute pointing to the PDF file.
        query: The question to be answered.
    Returns:
        The answer from the RAG model.
    """
    llm = get_llm()
    retriever_obj = retriever(file)
    # Initialize the RetrievalQA chain
    qa = RetrievalQA.from_chain_type(
        llm=llm,
        chain_type="stuff", # 'stuff' chain type combines all documents into one prompt
        retriever=retriever_obj,
        return_source_documents=True # Return the source documents used for the answer
    )
    # Invoke the QA chain with the user's query
    response = qa.invoke({"query": query})
    return response['result']

# Create Gradio interface
rag_application = gr.Interface(
    fn=retriever_qa, # The function to be called when the interface is run
    allow_flagging="never", # Disables the flagging feature in Gradio
    inputs=[
        gr.File(label="Upload PDF File", file_count="single", file_types=['.pdf'], type="filepath"),  # Drag and drop file upload
        gr.Textbox(label="Input Query", lines=2, placeholder="Type your question here...")
    ],
    outputs=gr.Textbox(label="Response from Chatbot"), # Output component for the chatbot's response
    title="PDF Chatbot with Watsonx.ai RAG", # Title of the Gradio application
    description="Upload a PDF document and ask any question. The chatbot will try to answer using the provided document."
)

# Launch the app
# The server_name is set to "0.0.0.0" to make it accessible externally.
# The server_port is removed to let Gradio automatically find an available port,
# which helps in avoiding "Address already in use" errors.
rag_application.launch(server_name="0.0.0.0")
